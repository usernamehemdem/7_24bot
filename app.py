from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import json
import os
import logging

# Loglama sazlamalary
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token
TOKEN = "7983997462:AAE7OlRTGdoAH9hv9CQ5h56a5gJHjweyjGA"

# Admin ID
ADMIN_USER_ID = 5330851495

# VPN kody
vpn_code = "ss://YWVzLTI1Ni1jZmI6OWMwNzUyZTM5ZWY2ZjIyYw@203.18.98.194:167"

# Fa√Ωl atlary
USERS_FILE = "ulanyjylar.json"
CHANNELS_FILE = "kanallar.json"

# Ulanyjylary √Ω√ºklemek/√Ωazmak
def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()

def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(list(users), f)

# Kanallary √Ω√ºklemek/√Ωazmak
def load_channels():
    if not os.path.exists(CHANNELS_FILE):
        data = {
            "ADMIN_KANALLAR": ["@HTTP_CUST0M", "@Hiddify_tm"],
            "BE√ùLEKI_KANALLAR": [
                "@PLAT1NUMS1",
                "@FULL_SERWERS",
                "@Turkmen_Shadowsocks",
                "@Dragonvp_n",
                "@utiha_servers",
                "@PLAT1NUM_CHAT",
                "https://t.me/addlist/PcDP7B2IRLNiZDhi"
            ]
        }
        save_channels(data)
        return data
    try:
        with open(CHANNELS_FILE, "r") as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {"ADMIN_KANALLAR": [], "BE√ùLEKI_KANALLAR": []}

def save_channels(data):
    with open(CHANNELS_FILE, "w") as f:
        json.dump(data, f, indent=4)

# Ba≈ülangy√ß maglumatlar
users = load_users()
channels = load_channels()

# /start bu√Ωrugy
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users.add(user_id)
    save_users(users)

    keyboard = []

    # H√∂kman kanallar
    for channel in channels["ADMIN_KANALLAR"]:
        if channel.startswith("@"):
            keyboard.append([InlineKeyboardButton(f"üîó {channel}", url=f"https://t.me/{channel[1:]}")])
        else:
            keyboard.append([InlineKeyboardButton(f"üîó {channel}", url=channel)])

    # Be√Ωleki kanallar
    for channel in channels["BE√ùLEKI_KANALLAR"]:
        if channel.startswith("@"):
            keyboard.append([InlineKeyboardButton(f"üîó {channel}", url=f"https://t.me/{channel[1:]}")])
        elif channel.startswith("http"):
            keyboard.append([InlineKeyboardButton("üîó Kanallary≈à sanawy", url=channel)])

    # Barlag d√ºwmesi
    keyboard.append([InlineKeyboardButton("‚úÖ Agzalygy barla ‚úÖ", callback_data="check_sub")])

    await update.effective_message.reply_text(
        "‚ú® A≈üakdaky kanallara agza bolmasa≈àyz, kody alyp bilmersi≈àiz. Ilki kanallara go≈üulun:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Agzalyk barlagy
async def check_sub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    not_joined = []

    for channel in channels["ADMIN_KANALLAR"]:
        try:
            member = await context.bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                not_joined.append(channel)
        except Exception as e:
            logger.error(f"√ùal≈ày≈ülyk (Kanal: {channel}): {e}")
            not_joined.append(channel)

    if not_joined:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "‚ùå A≈üakdaky kanallara entek go≈üulmady≈àyz:\n"
                f"{chr(10).join(not_joined)}\n\n"
                "T√§zeden barlamak √º√ßin /start √Ωazyp, '‚úÖ Agzalygy barla ‚úÖ' d√ºwmesine basy≈à."
            )
        )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "üéâ Agzalygy≈àyz tassyklanyldy!\n\n"
                f"**VPN kody≈àyz:**\n\n"
                f"`{vpn_code}`\n\n"
                "‚úÖ Kody g√∂√ß√ºrip VPN programma≈àyza giri≈à."
            ),
            parse_mode="Markdown"
        )

# Admin paneli
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("‚õî Bu bu√Ωrugy ulanyp bilmersi≈àiz!")
        return

    keyboard = [
        [InlineKeyboardButton("Kanallary g√∂rkez", callback_data="view_channels")],
        [InlineKeyboardButton("‚ûï Kanal go≈ü", callback_data="add_channel")],
        [InlineKeyboardButton("‚ûñ Kanal a√Ωyr", callback_data="remove_channel")],
        [InlineKeyboardButton("VPN kodyny √º√Ωtget", callback_data="change_vpn_code")],
        [InlineKeyboardButton("Ulanyjylary≈à sany", callback_data="user_count")],
    ]

    await update.message.reply_text(
        "üëë Admin paneli - A≈üakdaky opsi√Ωalary sa√Ωla≈à:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Admin jogap beriji
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id != ADMIN_USER_ID:
        await query.edit_message_text("‚õî Bu amaly √Ωerine √Ωetirip bilmersi≈àiz!")
        return

    data = query.data

    if data == "view_channels":
        text = "üìã ADMIN KANALLAR:\n" + "\n".join(channels["ADMIN_KANALLAR"])
        text += "\n\nüìã BE√ùLEKI KANALLAR:\n" + "\n".join(channels["BE√ùLEKI_KANALLAR"])
        await query.edit_message_text(text)
    elif data == "add_channel":
        await query.edit_message_text(
            "‚ûï Go≈üuljak kanaly ≈üu formatda √Ωazy≈à:\n\n`admin @kanal_ady` √Ωa-da `other @kanal_ady`",
            parse_mode="Markdown"
        )
        context.user_data["awaiting_add_channel"] = True
    elif data == "remove_channel":
        await query.edit_message_text(
            "‚ûñ A√Ωryljak kanaly ≈üu formatda √Ωazy≈à:\n\n`admin @kanal_ady` √Ωa-da `other @kanal_ady`",
            parse_mode="Markdown"
        )
        context.user_data["awaiting_remove_channel"] = True
    elif data == "change_vpn_code":
        await query.edit_message_text("‚úèÔ∏è T√§ze VPN koduny girizi≈à:")
        context.user_data["awaiting_vpn_code"] = True
    elif data == "user_count":
        await query.edit_message_text(f"üë• Jemi ulanyjylar: {len(users)}")

# Admin habar beriji
async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_USER_ID:
        return

    text = update.message.text

    if context.user_data.get("awaiting_add_channel"):
        try:
            type_, channel = text.split()
            if type_ == "admin":
                channels["ADMIN_KANALLAR"].append(channel)
            elif type_ == "other":
                channels["BE√ùLEKI_KANALLAR"].append(channel)
            save_channels(channels)
            await update.message.reply_text(f"‚úÖ Kanal go≈üuldy: {channel}")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è N√§dogry format! Dogry format: `admin @kanal` √Ωa-da `other @kanal`\n√ùal≈ày≈ülyk: {e}")
        context.user_data["awaiting_add_channel"] = False

    elif context.user_data.get("awaiting_remove_channel"):
        try:
            type_, channel = text.split()
            if type_ == "admin" and channel in channels["ADMIN_KANALLAR"]:
                channels["ADMIN_KANALLAR"].remove(channel)
                await update.message.reply_text(f"‚úÖ Kanal a√Ωryldy: {channel}")
            elif type_ == "other" and channel in channels["BE√ùLEKI_KANALLAR"]:
                channels["BE√ùLEKI_KANALLAR"].remove(channel)
                await update.message.reply_text(f"‚úÖ Kanal a√Ωryldy: {channel}")
            else:
                await update.message.reply_text("‚ö†Ô∏è Kanal tapylmady!")
            save_channels(channels)
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è N√§dogry format! Dogry format: `admin @kanal` √Ωa-da `other @kanal`\n√ùal≈ày≈ülyk: {e}")
        context.user_data["awaiting_remove_channel"] = False

    elif context.user_data.get("awaiting_vpn_code"):
        global vpn_code
        vpn_code = text
        await update.message.reply_text(f"‚úÖ VPN kody √º√Ωtgedildi:\n\n`{vpn_code}`", parse_mode="Markdown")
        context.user_data["awaiting_vpn_code"] = False

# Boty i≈üe girizmek
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(check_sub, pattern="^check_sub$"))
    app.add_handler(CallbackQueryHandler(admin_callback, pattern="^(view_channels|add_channel|remove_channel|change_vpn_code|user_count)$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_input))

    logger.info("ü§ñ Bot i≈üe girizil√Ω√§r...")
    app.run_polling()

if __name__ == "__main__":
    main()
